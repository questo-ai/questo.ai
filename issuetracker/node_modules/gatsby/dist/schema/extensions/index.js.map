{"version":3,"sources":["../../../src/schema/extensions/index.js"],"names":["GraphQLDirective","DirectiveLocation","defaultFieldResolver","require","link","fileByPath","getDateResolver","typeExtensions","infer","description","args","noDefaultResolvers","type","deprecationReason","dontInfer","mimeTypes","types","defaultValue","childOf","many","nodeInterface","locations","INTERFACE","builtInFieldExtensions","dateformat","name","formatString","locale","extend","fieldConfig","by","from","originalResolver","resolve","fileByRelativePath","proxy","source","context","info","fieldName","internalExtensionNames","reservedExtensionNames","Object","keys","toDirectives","schemaComposer","extensions","defaultLocations","map","extension","normalizedArgs","typeMapper","convertArgConfigMap","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","forEach","directive","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","getFieldExtensions","filter","includes","sort","a","prevFieldConfig","getFieldConfig","extendField","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLDirective,\n  DirectiveLocation,\n  defaultFieldResolver,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nconst { getDateResolver } = require(`../types/date`)\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst typeExtensions = {\n  infer: {\n    description: `Infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: `Boolean`,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  dontInfer: {\n    description: `Do not infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: `Boolean`,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  mimeTypes: {\n    description: `Define the mime-types handled by this type.`,\n    args: {\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `The mime-types handled by this type.`,\n      },\n    },\n  },\n  childOf: {\n    description:\n      `Define parent-child relations between types. This is used to add ` +\n      `\\`child*\\` or \\`children*\\` convenience fields like \\`childImageSharp\\`.`,\n    args: {\n      mimeTypes: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of mime-types this type is a child of. Usually these are ` +\n          `the mime-types handled by a transformer plugin.`,\n      },\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of types this type is a child of. Usually these are the ` +\n          `types handled by a transformer plugin.`,\n      },\n      many: {\n        type: `Boolean!`,\n        defaultValue: false,\n        description: `Specifies whether a parent can have multiple children of this type or not.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formating options.`,\n    args: {\n      formatString: `String`,\n      locale: `String`,\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: `String!`,\n        defaultValue: `id`,\n      },\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      const originalResolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve: link(args, originalResolver),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      const originalResolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve: fileByPath(args, originalResolver),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: `String!`,\n    },\n    extend({ from }, fieldConfig) {\n      const originalResolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve(source, args, context, info) {\n          return originalResolver(source, args, context, {\n            ...info,\n            fieldName: from,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description, locations } = extension\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .sort(a => a === `proxy`) // Ensure `proxy` is run last\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n}\n"],"file":"index.js"}