{"version":3,"sources":["../../src/commands/repl.js"],"names":["repl","require","graphql","bootstrap","loadNodeContent","getNodes","getNode","getNodesByType","store","module","exports","program","schema","config","babelrc","pages","components","staticQueryComponents","getState","nodes","query","result","console","log","JSON","stringify","_","start","prompt","context","entries","siteConfig","staticQueries","on","process","exit"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAE,SAAF,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAE,cAAF,CAAzB;;AACA,MAAM;AACJG,EAAAA,eADI;AAEJC,EAAAA,QAFI;AAGJC,EAAAA,OAHI;AAIJC,EAAAA;AAJI,IAKFN,OAAO,CAAE,aAAF,CALX;;AAMA,MAAM;AAAEO,EAAAA;AAAF,IAAYP,OAAO,CAAE,UAAF,CAAzB;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,MAAMC,OAAN,IAAiB;AAChC;AACA,QAAMR,SAAS,CAACQ,OAAD,CAAf,CAFgC,CAIhC;;AACA,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFT,KAAK,CAACU,QAAN,EAPJ;AASA,QAAMC,KAAK,GAAGd,QAAQ,EAAtB;;AAEA,QAAMe,KAAK,GAAG,MAAMA,KAAN,IAAe;AAC3B,UAAMC,MAAM,GAAG,MAAMnB,OAAO,CAACU,MAAD,EAASQ,KAAT,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,CAA5B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAuB,EAApD;AACD,GAHD,CAhBgC,CAqBhC;;;AACA,QAAMK,CAAC,GAAG1B,IAAI,CAAC2B,KAAL,CAAW;AACnBC,IAAAA,MAAM,EAAG;AADU,GAAX,CAAV,CAtBgC,CA0BhC;;;AACAF,EAAAA,CAAC,CAACG,OAAF,CAAUf,OAAV,GAAoBA,OAApB;AACAY,EAAAA,CAAC,CAACG,OAAF,CAAUb,UAAV,GAAuBA,UAAvB;AACAU,EAAAA,CAAC,CAACG,OAAF,CAAUvB,OAAV,GAAoBA,OAApB;AACAoB,EAAAA,CAAC,CAACG,OAAF,CAAUxB,QAAV,GAAqBA,QAArB;AACAqB,EAAAA,CAAC,CAACG,OAAF,CAAUtB,cAAV,GAA2BA,cAA3B;AACAmB,EAAAA,CAAC,CAACG,OAAF,CAAUzB,eAAV,GAA4BA,eAA5B;AACAsB,EAAAA,CAAC,CAACG,OAAF,CAAUV,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACW,OAAN,EAAJ,CAAlB;AACAJ,EAAAA,CAAC,CAACG,OAAF,CAAUd,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACe,OAAN,EAAJ,CAAlB;AACAJ,EAAAA,CAAC,CAACG,OAAF,CAAU3B,OAAV,GAAoBkB,KAApB;AACAM,EAAAA,CAAC,CAACG,OAAF,CAAUjB,MAAV,GAAmBA,MAAnB;AACAc,EAAAA,CAAC,CAACG,OAAF,CAAUE,UAAV,GAAuBlB,MAAvB;AACAa,EAAAA,CAAC,CAACG,OAAF,CAAUG,aAAV,GAA0Bf,qBAA1B;;AAEAS,EAAAA,CAAC,CAACO,EAAF,CAAM,MAAN,EAAa,MAAMC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAnB;AACD,CAzCD","sourcesContent":["const repl = require(`repl`)\nconst { graphql } = require(`graphql`)\nconst bootstrap = require(`../bootstrap`)\nconst {\n  loadNodeContent,\n  getNodes,\n  getNode,\n  getNodesByType,\n} = require(`../db/nodes`)\nconst { store } = require(`../redux`)\n\nmodule.exports = async program => {\n  // run bootstrap\n  await bootstrap(program)\n\n  // get all the goodies from the store\n  const {\n    schema,\n    config,\n    babelrc,\n    pages,\n    components,\n    staticQueryComponents,\n  } = store.getState()\n\n  const nodes = getNodes()\n\n  const query = async query => {\n    const result = await graphql(schema, query, {}, {}, {})\n    console.log(`query result: ${JSON.stringify(result)}`)\n  }\n\n  // init new repl\n  const _ = repl.start({\n    prompt: `gatsby > `,\n  })\n\n  // set some globals to make life easier\n  _.context.babelrc = babelrc\n  _.context.components = components\n  _.context.getNode = getNode\n  _.context.getNodes = getNodes\n  _.context.getNodesByType = getNodesByType\n  _.context.loadNodeContent = loadNodeContent\n  _.context.nodes = [...nodes.entries()]\n  _.context.pages = [...pages.entries()]\n  _.context.graphql = query\n  _.context.schema = schema\n  _.context.siteConfig = config\n  _.context.staticQueries = staticQueryComponents\n\n  _.on(`exit`, () => process.exit(0))\n}\n"],"file":"repl.js"}