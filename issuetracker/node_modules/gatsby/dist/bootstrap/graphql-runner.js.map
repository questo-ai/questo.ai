{"version":3,"sources":["../../src/bootstrap/graphql-runner.js"],"names":["graphql","require","stackTrace","withResolverContext","errorParser","default","createGraphqlRunner","store","reporter","query","context","schema","getState","then","result","errors","structuredErrors","map","e","file","parse","find","test","functionName","structuredError","message","location","start","line","lineNumber","column","columnNumber","filePath","fileName","fromGraphQLFunction","filter","Boolean","length","panicOnBuild","module","exports"],"mappings":";;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAE,SAAF,CAA3B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAE,aAAF,CAA1B;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAE,mBAAF,CAAnC;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAE,uBAAF,CAAP,CAAiCI,OAArD;;AAEA,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAACC,KAAD,EAAQC,OAAO,GAAG,EAAlB,KAAyB;AACxE,QAAMC,MAAM,GAAGJ,KAAK,CAACK,QAAN,GAAiBD,MAAhC;AAEA,SAAOX,OAAO,CACZW,MADY,EAEZF,KAFY,EAGZC,OAHY,EAIZP,mBAAmB,CAACO,OAAD,EAAUC,MAAV,CAJP,EAKZD,OALY,CAAP,CAMLG,IANK,CAMAC,MAAM,IAAI;AACf,QAAIA,MAAM,CAACC,MAAX,EAAmB;AACjB,YAAMC,gBAAgB,GAAGF,MAAM,CAACC,MAAP,CACtBE,GADsB,CAClBC,CAAC,IAAI;AACR;AACA,cAAMC,IAAI,GAAGjB,UAAU,CACpBkB,KADU,CACJF,CADI,EAEVG,IAFU,CAELF,IAAI,IAAI,cAAcG,IAAd,CAAmBH,IAAI,CAACI,YAAxB,CAFH,CAAb;;AAIA,YAAIJ,IAAJ,EAAU;AACR,gBAAMK,eAAe,GAAGpB,WAAW,CAAC;AAClCqB,YAAAA,OAAO,EAAEP,CAAC,CAACO,OADuB;AAElCC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,IAAI,EAAET,IAAI,CAACU,UAAb;AAAyBC,gBAAAA,MAAM,EAAEX,IAAI,CAACY;AAAtC;AADC,aAFwB;AAKlCC,YAAAA,QAAQ,EAAEb,IAAI,CAACc;AALmB,WAAD,CAAnC;AAOAT,UAAAA,eAAe,CAACd,OAAhB,qBACKc,eAAe,CAACd,OADrB;AAEEwB,YAAAA,mBAAmB,EAAE;AAFvB;AAIA,iBAAOV,eAAP;AACD;;AAED,eAAO,IAAP;AACD,OAvBsB,EAwBtBW,MAxBsB,CAwBfC,OAxBe,CAAzB;;AA0BA,UAAIpB,gBAAgB,CAACqB,MAArB,EAA6B;AAC3B;AACA7B,QAAAA,QAAQ,CAAC8B,YAAT,CAAsBtB,gBAAtB;AACD;AACF;;AAED,WAAOF,MAAP;AACD,GAzCM,CAAP;AA0CD,CA7CD;;AA+CAyB,MAAM,CAACC,OAAP,GAAiBlC,mBAAjB","sourcesContent":["const { graphql } = require(`graphql`)\nconst stackTrace = require(`stack-trace`)\nconst withResolverContext = require(`../schema/context`)\nconst errorParser = require(`../query/error-parser`).default\n\nconst createGraphqlRunner = (store, reporter) => (query, context = {}) => {\n  const schema = store.getState().schema\n\n  return graphql(\n    schema,\n    query,\n    context,\n    withResolverContext(context, schema),\n    context\n  ).then(result => {\n    if (result.errors) {\n      const structuredErrors = result.errors\n        .map(e => {\n          // Find the file where graphql was called.\n          const file = stackTrace\n            .parse(e)\n            .find(file => /createPages/.test(file.functionName))\n\n          if (file) {\n            const structuredError = errorParser({\n              message: e.message,\n              location: {\n                start: { line: file.lineNumber, column: file.columnNumber },\n              },\n              filePath: file.fileName,\n            })\n            structuredError.context = {\n              ...structuredError.context,\n              fromGraphQLFunction: true,\n            }\n            return structuredError\n          }\n\n          return null\n        })\n        .filter(Boolean)\n\n      if (structuredErrors.length) {\n        // panic on build exits the process\n        reporter.panicOnBuild(structuredErrors)\n      }\n    }\n\n    return result\n  })\n}\n\nmodule.exports = createGraphqlRunner\n"],"file":"graphql-runner.js"}