{"version":3,"sources":["../../src/utils/websocket-manager.js"],"names":["path","require","store","fs","pageDataUtil","normalizePagePath","telemetry","url","createHash","getCachedPageData","pagePath","directory","program","getState","publicDir","join","pageData","read","result","id","err","console","log","undefined","hashPaths","paths","map","update","digest","getCachedStaticQueryResults","resultsMap","cachedStaticQueryResults","Map","staticQueryComponents","forEach","staticQueryComponent","has","hash","filePath","fileResult","readFileSync","componentPath","set","JSON","parse","getRoomNameFromPath","WebsocketManager","constructor","isInitialised","activePaths","Set","pageResults","staticQueryResults","errors","init","bind","getSocket","emitPageData","emitStaticQueryData","emitError","connectedClients","server","programDir","websocket","on","s","activePath","handshake","headers","referer","add","send","type","payload","message","errorID","leaveRoom","leave","leftRoom","sockets","adapter","rooms","length","delete","getDataForPath","why","get","trackCli","siteMeasurements","clientsCount","Array","from","debounce","data","manager","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nconst path = require(`path`)\nconst { store } = require(`../redux`)\nconst fs = require(`fs`)\nconst pageDataUtil = require(`../utils/page-data`)\nconst normalizePagePath = require(`../utils/normalize-page-path`)\nconst telemetry = require(`gatsby-telemetry`)\nconst url = require(`url`)\nconst { createHash } = require(`crypto`)\n\ntype QueryResult = {\n  id: string,\n  result: object,\n}\n\ntype QueryResultsMap = Map<string, QueryResult>\n\n/**\n * Get cached page query result for given page path.\n * @param {string} pagePath Path to a page.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedPageData = async (\n  pagePath: string,\n  directory: string\n): QueryResult => {\n  const { program } = store.getState()\n  const publicDir = path.join(program.directory, `public`)\n  try {\n    const pageData = await pageDataUtil.read({ publicDir }, pagePath)\n    return {\n      result: pageData.result,\n      id: pagePath,\n    }\n  } catch (err) {\n    console.log(\n      `Error loading a result for the page query in \"${pagePath}\". Query was not run and no cached result was found.`\n    )\n    return undefined\n  }\n}\n\nconst hashPaths = paths => {\n  if (!paths) {\n    return undefined\n  }\n  return paths.map(path => {\n    if (!path) {\n      return undefined\n    }\n    return createHash(`sha256`)\n      .update(path)\n      .digest(`hex`)\n  })\n}\n\n/**\n * Get cached StaticQuery results for components that Gatsby didn't run query yet.\n * @param {QueryResultsMap} resultsMap Already stored results for queries that don't need to be read from files.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedStaticQueryResults = (\n  resultsMap: QueryResultsMap,\n  directory: string\n): QueryResultsMap => {\n  const cachedStaticQueryResults = new Map()\n  const { staticQueryComponents } = store.getState()\n  staticQueryComponents.forEach(staticQueryComponent => {\n    // Don't read from file if results were already passed from query runner\n    if (resultsMap.has(staticQueryComponent.hash)) return\n    const filePath = path.join(\n      directory,\n      `public`,\n      `static`,\n      `d`,\n      `${staticQueryComponent.hash}.json`\n    )\n    const fileResult = fs.readFileSync(filePath, `utf-8`)\n    if (fileResult === `undefined`) {\n      console.log(\n        `Error loading a result for the StaticQuery in \"${\n          staticQueryComponent.componentPath\n        }\". Query was not run and no cached result was found.`\n      )\n      return\n    }\n    cachedStaticQueryResults.set(staticQueryComponent.hash, {\n      result: JSON.parse(fileResult),\n      id: staticQueryComponent.hash,\n    })\n  })\n  return cachedStaticQueryResults\n}\n\nconst getRoomNameFromPath = (path: string): string => `path-${path}`\n\nclass WebsocketManager {\n  pageResults: QueryResultsMap\n  staticQueryResults: QueryResultsMap\n  errors: Map<string, QueryResult>\n  isInitialised: boolean\n  activePaths: Set<string>\n  programDir: string\n\n  constructor() {\n    this.isInitialised = false\n    this.activePaths = new Set()\n    this.pageResults = new Map()\n    this.staticQueryResults = new Map()\n    this.errors = new Map()\n    // this.websocket\n    // this.programDir\n\n    this.init = this.init.bind(this)\n    this.getSocket = this.getSocket.bind(this)\n    this.emitPageData = this.emitPageData.bind(this)\n    this.emitStaticQueryData = this.emitStaticQueryData.bind(this)\n    this.emitError = this.emitError.bind(this)\n    this.connectedClients = 0\n  }\n\n  init({ server, directory }) {\n    this.programDir = directory\n\n    const cachedStaticQueryResults = getCachedStaticQueryResults(\n      this.staticQueryResults,\n      this.programDir\n    )\n    this.staticQueryResults = new Map([\n      ...this.staticQueryResults,\n      ...cachedStaticQueryResults,\n    ])\n\n    this.websocket = require(`socket.io`)(server)\n\n    this.websocket.on(`connection`, s => {\n      let activePath = null\n      if (\n        s &&\n        s.handshake &&\n        s.handshake.headers &&\n        s.handshake.headers.referer\n      ) {\n        const path = url.parse(s.handshake.headers.referer).path\n        if (path) {\n          activePath = path\n          this.activePaths.add(path)\n        }\n      }\n\n      this.connectedClients += 1\n      // Send already existing static query results\n      this.staticQueryResults.forEach(result => {\n        this.websocket.send({\n          type: `staticQueryResult`,\n          payload: result,\n        })\n      })\n      this.errors.forEach((message, errorID) => {\n        this.websocket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      const leaveRoom = path => {\n        s.leave(getRoomNameFromPath(path))\n        const leftRoom = this.websocket.sockets.adapter.rooms[\n          getRoomNameFromPath(path)\n        ]\n        if (!leftRoom || leftRoom.length === 0) {\n          this.activePaths.delete(path)\n        }\n      }\n\n      const getDataForPath = async path => {\n        if (!this.pageResults.has(path)) {\n          const result = await getCachedPageData(path, this.programDir)\n          if (result) {\n            this.pageResults.set(path, result)\n          } else {\n            console.log(`Page not found`, path)\n            return\n          }\n        }\n\n        this.websocket.send({\n          type: `pageQueryResult`,\n          why: `getDataForPath`,\n          payload: this.pageResults.get(path),\n        })\n\n        telemetry.trackCli(\n          `WEBSOCKET_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.connectedClients,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n\n      s.on(`getDataForPath`, getDataForPath)\n\n      s.on(`registerPath`, path => {\n        s.join(getRoomNameFromPath(path))\n        activePath = path\n        this.activePaths.add(path)\n      })\n\n      s.on(`disconnect`, s => {\n        leaveRoom(activePath)\n        this.connectedClients -= 1\n      })\n\n      s.on(`unregisterPath`, path => {\n        leaveRoom(path)\n      })\n    })\n\n    this.isInitialised = true\n  }\n\n  getSocket() {\n    return this.isInitialised && this.websocket\n  }\n\n  emitStaticQueryData(data: QueryResult) {\n    this.staticQueryResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n      telemetry.trackCli(\n        `WEBSOCKET_EMIT_STATIC_PAGE_DATA_UPDATE`,\n        {\n          siteMeasurements: {\n            clientsCount: this.connectedClients,\n            paths: hashPaths(Array.from(this.activePaths)),\n          },\n        },\n        { debounce: true }\n      )\n    }\n  }\n\n  emitPageData(data: QueryResult) {\n    data.id = normalizePagePath(data.id)\n    this.pageResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n      telemetry.trackCli(\n        `WEBSOCKET_EMIT_PAGE_DATA_UPDATE`,\n        {\n          siteMeasurements: {\n            clientsCount: this.connectedClients,\n            paths: hashPaths(Array.from(this.activePaths)),\n          },\n        },\n        { debounce: true }\n      )\n    }\n  }\n  emitError(id: string, message?: string) {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.isInitialised) {\n      this.websocket.send({ type: `overlayError`, payload: { id, message } })\n    }\n  }\n}\n\nconst manager = new WebsocketManager()\n\nmodule.exports = manager\n"],"file":"websocket-manager.js"}